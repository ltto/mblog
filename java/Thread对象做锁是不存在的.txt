## 题目如下
```java
    private static final MyThread myThread = new MyThread();
    public static void main(String[] args) {
        myThread.start();
        synchronized (myThread) {
            System.out.println("1");
            System.out.println("2");
            try {
                myThread.wait();
                System.out.println("3");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    static class MyThread extends Thread {
        MyThread() {
            super("thread lock");
        }
        @Override
        public void run() {
            synchronized (this) {
                System.out.println("4");
            }
        }
    }
//Main方法的运输结果
```
运算结果:
> 1种情况(run先获得锁) 4 1 2 (3被wait)
> 2种情况(Main先获得锁) 1 2 3 4 
第一种情况不用说好吧
关于第二种情况自己去看看java.lang.Thread#join(long)方法的注释
```
    /**
     * Waits at most {@code millis} milliseconds for this thread to
     * die. A timeout of {@code 0} means to wait forever.
     *
     * <p> This implementation uses a loop of {@code this.wait} calls
     * conditioned on {@code this.isAlive}. As a thread terminates the
     * {@code this.notifyAll} method is invoked. It is recommended that
     * applications not use {@code wait}, {@code notify}, or
     * {@code notifyAll} on {@code Thread} instances.
```
也就是说在run方法结束的时候后会调用`this.notifyAll()`
- - - - - - - - - - - - 

`*` [点击查看stackoverflow完整解答](https://stackoverflow.com/questions/54433327/why-does-invoking-wait-on-a-thread-object-unblock-when-the-thread-completes)